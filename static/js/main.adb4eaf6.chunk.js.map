{"version":3,"sources":["components/WeatherInfo.jsx","components/Weather.jsx","redux/action/weatherAction.js","components/SearchCity.jsx","components/Error.jsx","App.js","reportWebVitals.js","redux/reducers/weatherReducer.js","redux/store.js","index.js"],"names":["WeatherInfo","props","sunrise","Date","info","sys","toLocaleTimeString","slice","sunset","weatherIcon","weather","main","icon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","className","name","country","Math","floor","temp","description","temp_max","wind","speed","temp_min","humidity","Weather","isLoaded","setLoading","value","type","payload","SearchCity","dispatch","useDispatch","state","useSelector","textarea","weatherPage","linkText","React","createRef","onSubmit","event","nameCity","axios","get","then","data","catch","error","preventDefault","ref","onChange","newCity","current","changeText","placeholder","Error","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","weatherReducer","action","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.adb4eaf6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faCloud,\r\n  faBolt,\r\n  faCloudRain,\r\n  faCloudShowersHeavy,\r\n  faSnowflake,\r\n  faSun,\r\n  faSmog,\r\n  \r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst WeatherInfo = (props) => {\r\n    const sunrise = new Date(props.info.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\r\n    const sunset = new Date(props.info.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\r\n\r\n    let weatherIcon = null;\r\n\r\n  if (props.info.weather[0].main === 'Thunderstorm') {\r\n    weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n  } else if (props.info.weather[0].main === 'Drizzle') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n  } else if (props.info.weather[0].main === 'Rain') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n  } else if (props.info.weather[0].main === 'Snow') {\r\n    weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n  } else if (props.info.weather[0].main === 'Clear') {\r\n    weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n  } else if (props.info.weather[0].main === 'Clouds') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n  } else {\r\n    weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n  }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"weather__city\">\r\n                <h3>{props.info.name}, {props.info.sys.country}</h3>\r\n            </div>\r\n            <div className=\"weather\">\r\n                <div className=\"weather__degree\">\r\n                    <div className=\"weather__degree__svg\">\r\n                    <div className=\"svg\">\r\n                    {weatherIcon}\r\n                    </div>\r\n                    \r\n            </div>\r\n                    <div className=\"weather__degree__numb\">\r\n                        <h3>{Math.floor(props.info.main.temp)}°</h3>\r\n                        <h4>{props.info.weather[0].description}</h4>\r\n                    </div>\r\n                </div>\r\n                <div className=\"weather__info\">\r\n                    <div className=\"weather__info__item\">\r\n                        <h3>{Math.floor(props.info.main.temp_max)}°</h3>\r\n                        <h4>Максимум</h4>\r\n                    </div>\r\n                    <div className=\"weather__info__item\">\r\n                        <h3>{props.info.wind.speed} миль/ч</h3>\r\n                        <h4>Ветер</h4>\r\n                    </div>\r\n                    <div className=\"weather__info__item\">\r\n                        <h3>{sunrise}</h3>\r\n                        <h4>Восход</h4>\r\n                    </div>\r\n                    <div className=\"weather__info__item\">\r\n                        <h3>{Math.floor(props.info.main.temp_min)}°</h3>\r\n                        <h4>Минимум</h4>\r\n                    </div>\r\n                    <div className=\"weather__info__item\">\r\n                        <h3>{props.info.main.humidity} %</h3>\r\n                        <h4>Влажность</h4>\r\n                    </div>\r\n                    <div className=\"weather__info__item\">\r\n                        <h3>{sunset}</h3>\r\n                        <h4>Заход</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherInfo;\r\n","import React from 'react';\r\nimport WeatherInfo from './WeatherInfo';\r\n\r\nconst Weather = (props) => {\r\n      \r\n    return (\r\n        <div>\r\n       \r\n            {!props.isLoaded ? '' : <WeatherInfo info={props.weather}/>}\r\n           \r\n        </div>\r\n    )\r\n\r\n }\r\n\r\nexport default Weather;\r\n","import axios from 'axios';\r\n\r\nexport const changeText = (newCity) => ({\r\n  type: 'CHANGE_TEXT',\r\n  payload: newCity\r\n})\r\n\r\nexport const addWeather = (weather) => ({\r\n  type: 'ADD_WEATHER',\r\n  payload: weather\r\n})\r\n\r\nexport const addError = (weather) => ({\r\n  type: 'ADD_ERROR',\r\n  payload: weather\r\n})\r\n\r\nexport const fetchWeather = (nameCity) => (dispatch) => {\r\n  dispatch(setLoading(false))\r\n  axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${nameCity}&lang=ru&&units=metric&appid=ebe9e318496a0c50d405ead8cf00662c`)\r\n    .then(({ data }) => {\r\n      dispatch(addWeather(data))\r\n    })\r\n    .catch(error => dispatch(addError()));\r\n}\r\n\r\nexport const setLoading = (value) => ({\r\n  type: 'SET_LOADING',\r\n  payload: value\r\n})\r\n\r\n\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchWeather, changeText } from '../redux/action/weatherAction';\r\n\r\n\r\nconst SearchCity = () => {\r\n    const dispatch = useDispatch();\r\n    const state = useSelector(state => {\r\n        return {\r\n            textarea: state.weatherPage.textarea,\r\n        }\r\n    });\r\n\r\n    let linkText = React.createRef();\r\n    const onChangeCity = () => {\r\n        let newCity = linkText.current.value;\r\n        dispatch(changeText(newCity));\r\n    }\r\n\r\n    const sumbitCity = (event) => {\r\n        dispatch(fetchWeather(state.textarea));\r\n        event.preventDefault();\r\n    }\r\n    return (\r\n        <>\r\n            <form onSubmit={sumbitCity} className=\"search\">\r\n                <input type=\"text\" ref={linkText} onChange={onChangeCity} value={state.textarea} placeholder=\"Введите город\" className=\"search__input\" />\r\n            </form>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default SearchCity;\r\n","import React from 'react';\r\n\r\n\r\nconst Error = (props) => {\r\n  \r\n    \r\n    return (\r\n        <div className='error'>\r\n       \r\n          <h3>Название города введено неверно. <br/>Попробуйте еще раз.</h3>\r\n        </div>\r\n    )\r\n\r\n }\r\n\r\nexport default Error;\r\n","import React from 'react';\nimport Weather from './components/Weather';\nimport SearchCity from './components/SearchCity';\nimport { useSelector } from 'react-redux';\nimport Error from './components/Error';\n\nfunction App() {\n  \n  const state = useSelector(state => ({\n      weather: state.weatherPage.weather,\n      isLoaded: state.weatherPage.isLoaded,\n      error: state.weatherPage.error\n  }))\n \n\n  return (\n    <div className=\"wrapper\">\n        <div className=\"content\">\n        <SearchCity />\n      {state.error ? <Error /> : <Weather isLoaded={state.isLoaded} weather={state.weather}/> }  \n        </div>\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {\r\n    weather: [],\r\n    textarea: 'Kiev',\r\n    isLoaded: false,\r\n    error: false\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_WEATHER':\r\n            return {\r\n                ...state,\r\n                weather: action.payload,\r\n                isLoaded: true,\r\n                textarea: ''\r\n            };\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoaded: action.payload,\r\n                error: false\r\n            }\r\n        case 'ADD_ERROR':\r\n            return {\r\n                ...state,\r\n                weather: null,\r\n                isLoaded: true,\r\n                error: true\r\n            }\r\n        case 'CHANGE_TEXT':\r\n            return {\r\n                ...state,\r\n                textarea: action.payload\r\n            };\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default weatherReducer;","import { combineReducers, createStore, compose, applyMiddleware } from 'redux';\r\nimport weatherReducer from './reducers/weatherReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    weatherPage: weatherReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render( \n   <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}