{"version":3,"sources":["components/Error.tsx","components/WeatherInfo.tsx","components/Weather.tsx","redux/action/weatherAction.ts","components/SearchCity.tsx","App.tsx","redux/reducers/weatherReducer.ts","redux/store.ts","index.tsx"],"names":["Error","className","WeatherInfo","props","weather","sunrise","Date","sys","toLocaleTimeString","slice","sunset","weatherIcon","main","icon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","name","country","Math","floor","temp","description","temp_max","wind","speed","temp_min","humidity","Weather","isLoaded","memo","setLoading","value","type","payload","SearchCity","dispatch","useDispatch","state","useSelector","textarea","weatherPage","linkText","React","useRef","onSubmit","event","nameCity","axios","get","then","data","catch","error","preventDefault","ref","onChange","newCity","current","changeText","placeholder","App","initialState","weatherReducer","action","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c2abf7f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div className='error'>  \r\n          <h3>Название города введено неверно. <br/>Попробуйте еще раз.</h3>\r\n        </div>\r\n    )\r\n }\r\n\r\nexport default Error;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faCloud,\r\n  faBolt,\r\n  faCloudRain,\r\n  faCloudShowersHeavy,\r\n  faSnowflake,\r\n  faSun,\r\n  faSmog,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { weatherType } from '../redux/reducers/weatherReducer';\r\nimport Error from './Error';\r\n\r\ntype propsType = {\r\n  weather: weatherType | null\r\n}\r\n\r\nconst WeatherInfo: React.FC<propsType> = (props) => {\r\n  if (props.weather === null) {\r\n    return <Error />\r\n  } else {\r\n    const sunrise: string = new Date(props.weather.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\r\n    const sunset: string = new Date(props.weather.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\r\n    let weatherIcon = null;\r\n\r\n    switch (props.weather.weather[0].main) {\r\n      case 'Thunderstorm':\r\n        weatherIcon = <FontAwesomeIcon icon={faBolt} />\r\n        break\r\n      case 'Drizzle':\r\n        weatherIcon = <FontAwesomeIcon icon={faCloudRain} />\r\n        break\r\n      case 'Rain':\r\n        weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />\r\n        break\r\n      case 'Snow':\r\n        weatherIcon = <FontAwesomeIcon icon={faSnowflake} />\r\n        break\r\n      case 'Clear':\r\n        weatherIcon = <FontAwesomeIcon icon={faSun} />\r\n        break\r\n      case 'Clouds':\r\n        weatherIcon = <FontAwesomeIcon icon={faCloud} />\r\n        break\r\n      default:\r\n        weatherIcon = <FontAwesomeIcon icon={faSmog} />\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"weather__city\">\r\n          <h3>{props.weather.name}, {props.weather.sys.country}</h3>\r\n        </div>\r\n        <div className=\"weather\">\r\n          <div className=\"weather__degree\">\r\n            <div className=\"weather__degree__svg\">\r\n              <div className=\"svg\">\r\n                {weatherIcon}\r\n              </div>\r\n            </div>\r\n            <div className=\"weather__degree__numb\">\r\n              <h3>{Math.floor(props.weather.main.temp)}°</h3>\r\n              <h4>{props.weather.weather[0].description}</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"weather__info\">\r\n            <div className=\"weather__info__item\">\r\n              <h3>{Math.floor(props.weather.main.temp_max)}°</h3>\r\n              <h4>Максимум</h4>\r\n            </div>\r\n            <div className=\"weather__info__item\">\r\n              <h3>{props.weather.wind.speed} миль/ч</h3>\r\n              <h4>Ветер</h4>\r\n            </div>\r\n            <div className=\"weather__info__item\">\r\n              <h3>{sunrise}</h3>\r\n              <h4>Восход</h4>\r\n            </div>\r\n            <div className=\"weather__info__item\">\r\n              <h3>{Math.floor(props.weather.main.temp_min)}°</h3>\r\n              <h4>Минимум</h4>\r\n            </div>\r\n            <div className=\"weather__info__item\">\r\n              <h3>{props.weather.main.humidity} %</h3>\r\n              <h4>Влажность</h4>\r\n            </div>\r\n            <div className=\"weather__info__item\">\r\n              <h3>{sunset}</h3>\r\n              <h4>Заход</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherInfo;\r\n","import React, { memo } from 'react';\r\nimport { weatherType } from '../redux/reducers/weatherReducer';\r\nimport WeatherInfo from './WeatherInfo';\r\ntype propsType = {\r\n    isLoaded: boolean\r\n    weather:  weatherType | null\r\n}\r\n\r\nconst Weather: React.FC<propsType> = (props) => {\r\n    return (\r\n        <>\r\n            {!props.isLoaded ? '' : <WeatherInfo weather={props.weather}/>}\r\n        </>\r\n    )\r\n }\r\n\r\nexport default memo(Weather);\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { weatherType } from '../reducers/weatherReducer';\r\n\r\nconst CHANGE_TEXT = 'CHANGE_TEXT'\r\nconst ADD_WEATHER = 'ADD_WEATHER'\r\nconst ADD_ERROR = 'ADD_ERROR'\r\nconst SET_LOADING = 'SET_LOADING'\r\n\r\nexport type weatherActionType = changeTextType | addWeatherType | addErrorType | setLoadingType\r\n\r\ntype changeTextType = {\r\n  type: typeof CHANGE_TEXT\r\n  payload: string\r\n}\r\n\r\ntype addWeatherType = {\r\n  type: typeof ADD_WEATHER\r\n  payload:  weatherType\r\n}\r\n\r\ntype addErrorType = {\r\n  type: typeof ADD_ERROR\r\n}\r\n\r\ntype setLoadingType = {\r\n  type: typeof SET_LOADING,\r\n  payload: boolean\r\n}\r\nexport const changeText = (newCity: string): changeTextType => ({\r\n  type: CHANGE_TEXT,\r\n  payload: newCity\r\n})\r\n\r\nexport const addError = (): addErrorType => ({\r\n  type: ADD_ERROR\r\n})\r\n\r\n\r\nexport const addWeather = (weather: weatherType ): addWeatherType => ({\r\n  type: ADD_WEATHER,\r\n  payload: weather\r\n})\r\n\r\nexport const fetchWeather = (nameCity: string) => (dispatch: Dispatch<weatherActionType>) => {\r\n  dispatch(setLoading(false))\r\n  axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${nameCity}&lang=ru&&units=metric&appid=ebe9e318496a0c50d405ead8cf00662c`)\r\n    .then(({ data }) => {\r\n      dispatch(addWeather(data))\r\n    })\r\n    .catch(error => dispatch(addError()));\r\n}\r\n\r\nexport const setLoading = (value: boolean): setLoadingType => ({\r\n  type: SET_LOADING,\r\n  payload: value\r\n})\r\n\r\n\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchWeather, changeText } from '../redux/action/weatherAction';\r\nimport { stateType } from '../redux/store';\r\n\r\nconst SearchCity = () => {\r\n    const dispatch = useDispatch();\r\n    const state = useSelector((state: stateType) => {\r\n        return {\r\n            textarea: state.weatherPage.textarea,\r\n        }\r\n    });\r\n\r\n    let linkText = React.useRef<HTMLInputElement>(null);\r\n    const onChangeCity = () => {\r\n        let newCity = linkText.current!.value;\r\n        dispatch(changeText(newCity));\r\n    }\r\n\r\n    const sumbitCity = (event: React.FormEvent<HTMLFormElement>) => {\r\n        dispatch(fetchWeather(state.textarea));\r\n        event.preventDefault();\r\n    }\r\n    return (\r\n        <>\r\n            <form onSubmit={sumbitCity} className=\"search\">\r\n                <input type=\"text\" ref={linkText} onChange={onChangeCity} value={state.textarea} placeholder=\"Введите город\" className=\"search__input\" />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchCity;\r\n","import { stateType } from './redux/store';\r\nimport React from 'react';\r\nimport Weather from './components/Weather';\r\nimport SearchCity from './components/SearchCity';\r\nimport { useSelector } from 'react-redux';\r\nimport Error from './components/Error';\r\n\r\nconst App = () => {\r\n  const state = useSelector((state: stateType) => ({\r\n    weather: state.weatherPage.weather,\r\n    isLoaded: state.weatherPage.isLoaded,\r\n    error: state.weatherPage.error\r\n  }))\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"content\">\r\n        <SearchCity />\r\n        {state.error ? <Error /> : <Weather isLoaded={state.isLoaded} weather={state.weather} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { weatherActionType } from \"../action/weatherAction\"\r\n\r\ntype initialStateType = {\r\n    weather: weatherType | null\r\n    isLoaded: boolean\r\n    textarea: string\r\n    error: boolean\r\n}\r\n\r\ntype coordType = {\r\n    lon: number\r\n    lat: number\r\n}\r\n\r\ntype miniWeatherType = {\r\n    id: number\r\n    main: string\r\n    description: string\r\n    icon: string\r\n}\r\n\r\ntype mainType = {\r\n    temp: number\r\n    feels_like: number\r\n    temp_min: number\r\n    temp_max: number\r\n    pressure: number\r\n    humidity: number\r\n    sea_level: number\r\n    grnd_level: number\r\n}\r\n\r\ntype windType = {\r\n    speed: number\r\n    deg: number\r\n}\r\n\r\ntype snowType = {\r\n    [key: string]: number\r\n}\r\n\r\ntype cloudsType = {\r\n    all: number\r\n}\r\n\r\ntype sysType = {\r\n    country: string\r\n    sunrise: number\r\n    sunset: number\r\n}\r\n\r\nexport type weatherType = {\r\n    coord: coordType\r\n    weather: Array<miniWeatherType>\r\n    base: string\r\n    main: mainType\r\n    visibility: number,\r\n    wind: windType\r\n    snow: snowType\r\n    clouds: cloudsType\r\n    dt: number,\r\n    sys: sysType\r\n    timezone: number,\r\n    id: number,\r\n    name: string,\r\n    cod: number\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    weather: null,  \r\n    isLoaded: false,\r\n    textarea: '',\r\n    error: false\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action: weatherActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_WEATHER':\r\n            return {\r\n                ...state,\r\n                weather: action.payload,\r\n                isLoaded: true,\r\n                textarea: ''\r\n            };\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoaded: action.payload,\r\n                error: false\r\n            }\r\n        case 'ADD_ERROR':\r\n            return {\r\n                ...state,\r\n                weather: null,\r\n                isLoaded: true,\r\n                error: true\r\n            }\r\n        case 'CHANGE_TEXT':\r\n            return {\r\n                ...state,\r\n                textarea: action.payload\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default weatherReducer;","import { combineReducers, createStore, compose, applyMiddleware } from 'redux';\r\nimport weatherReducer from './reducers/weatherReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n    weatherPage: weatherReducer\r\n})\r\n\r\nexport type stateType = ReturnType<typeof reducers>\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render( \r\n   <Provider store={store}>\r\n    <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}